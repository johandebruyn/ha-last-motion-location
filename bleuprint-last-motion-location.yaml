blueprint:
  name: Last Motion Location Badge
  description: >
    Displays a badge with the location of the last detected motion. The badge
    disappears after a specified time without motion and can be configured to
    show based on presence (e.g., someone is home, no one is home, or always).
  domain: automation
  input:
    motion_sensors:
      name: Motion and Occupancy Sensors
      description: Select motion and occupancy sensors to monitor.
      selector:
        entity:
          domain: binary_sensor
          multiple: true

    sensor_display_names:
      name: Sensor Display Names
      description: Provide display names for each selected motion sensor (comma-separated, matching the order of sensors).
      default: ""
      selector:
        text: {}

    display_duration:
      name: Display Duration
      description: Duration (in minutes) to keep the badge visible after the last motion.
      default: 10
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: minutes

    badge_text:
      name: Badge Text
      description: The text to display on the badge.
      default: "Last motion detected at"
      selector:
        text: {}

    presence_option:
      name: Presence Option
      description: Choose when the badge should be visible based on presence.
      default: "always"
      selector:
        select:
          options:
            - "always"
            - "someone_home"
            - "no_one_home"

    tracked_persons:
      name: Tracked Persons
      description: Select multiple persons to track for presence status.
      selector:
        entity:
          domain: person
          multiple: true

variables:
  display_duration: !input display_duration
  presence_option: !input presence_option
  badge_text: !input badge_text
  sensor_display_names: !input sensor_display_names
  sensor_name_map: >
    {% set sensors = motion_sensors.split(',') %}
    {% set names = sensor_display_names.split(',') %}
    {% set mapping = {} %}
    {% for i in range(0, sensors | length) %}
      {% set sensor = sensors[i] %}
      {% set name = names[i] if i < names | length else "Unnamed Sensor" %}
      {% if sensor and name %}
        {% set mapping = mapping | dict(sensor, name) %}
      {% endif %}
    {% endfor %}
    {{ mapping }}

trigger:
  - platform: state
    entity_id: !input motion_sensors
    to: 'on'

condition:
  - condition: template
    value_template: >
      {% if presence_option == 'always' %}
        true
      {% elif presence_option == 'someone_home' %}
        {{ expand(!input tracked_persons) | selectattr('state', 'eq', 'home') | list | count > 0 }}
      {% elif presence_option == 'no_one_home' %}
        {{ expand(!input tracked_persons) | selectattr('state', 'eq', 'home') | list | count == 0 }}
      {% else %}
        false
      {% endif %}

action:
  - service: input_datetime.set_datetime
    target:
      entity_id: input_datetime.last_motion_time
    data:
      timestamp: "{{ now().timestamp() }}"
  - service: input_text.set_value
    target:
      entity_id: input_text.last_motion_location
    data:
      value: >
        {% for sensor in trigger.entity_id %}
          {% if is_state(sensor, 'on') %}
            {{ sensor_name_map[sensor] }}
          {% endif %}
        {% endfor %}

mode: single  # Ensures only one instance of this automation runs at a time

# Input fields to store data
input_text:
  last_motion_location:
    name: "Last Motion Location"
    initial: ""

input_datetime:
  last_motion_time:
    name: "Last Motion Time"
    has_time: true
    has_date: false
